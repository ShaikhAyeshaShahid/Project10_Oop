process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\Hp\.config\Desktop\TS Projects\Project11_Oop_Mybank\node_modules\.bin\esrun-1715855541142.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// index.ts
import inquirer from "../../node_modules/inquirer/lib/inquirer.js";
var require_Project11_Oop_Mybank = __commonJS({
  "index.ts"(exports) {
    var Student = class {
      constructor(n) {
        this.name = n;
      }
    };
    var Person = class {
      constructor() {
        this.students = [];
      }
      addStudent(obj) {
        this.students.push(obj);
      }
    };
    var persons = new Person();
    var programStart = (persons2) => __async(exports, null, function* () {
      do {
        console.log("Welcome!");
        const ans = yield inquirer.prompt({
          name: "select",
          type: "list",
          message: "Whom would you like to interact with ?",
          choices: ["staff", "student", "exit"]
        });
        if (ans.select == "staff") {
          console.log(
            "You approach the staff room. Please feel free to ask any question."
          );
        } else if (ans.select == "student") {
          const ans2 = yield inquirer.prompt({
            name: "student",
            type: "input",
            message: "Enter the student's name you wish to angage with: "
          });
          const student = persons2.students.find((val) => val.name == ans2.student);
          if (!student) {
            const name = new Student(ans2.student);
            persons2.addStudent(name);
            console.log(`Hello i am ${name.name}. Nice to meet you!`);
            console.log("New student added.");
            console.log("Current student list:");
            console.log(persons2.students);
          } else {
            console.log(`Hello i am ${Student.name}.Nice to see you again!`);
            console.log("Existing student list: ");
            console.log(persons2.students);
          }
        } else if (ans.select == "exit") {
          console.log("Exiting the program...");
        }
      } while (true);
    });
    programStart(persons);
  }
});
export default require_Project11_Oop_Mybank();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaW5kZXgudHMiXSwKICAic291cmNlUm9vdCI6ICJDOlxcVXNlcnNcXEhwXFwuY29uZmlnXFxEZXNrdG9wXFxUUyBQcm9qZWN0c1xcUHJvamVjdDExX09vcF9NeWJhbmsiLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IGlucXVpcmVyIGZyb20gXCJpbnF1aXJlclwiO1xyXG5cclxuY2xhc3MgU3R1ZGVudCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKG46IHN0cmluZykge1xyXG4gICAgdGhpcy5uYW1lID0gbjtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFBlcnNvbiB7XHJcbiAgc3R1ZGVudHM6IFN0dWRlbnRbXSA9IFtdO1xyXG4gIGFkZFN0dWRlbnQob2JqOiBTdHVkZW50KSB7XHJcbiAgICB0aGlzLnN0dWRlbnRzLnB1c2gob2JqKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHBlcnNvbnMgPSBuZXcgUGVyc29uKCk7XHJcbmNvbnN0IHByb2dyYW1TdGFydCA9IGFzeW5jIChwZXJzb25zOiBQZXJzb24pID0+IHtcclxuICBkbyB7XHJcbiAgICBjb25zb2xlLmxvZyhcIldlbGNvbWUhXCIpO1xyXG4gICAgY29uc3QgYW5zID0gYXdhaXQgaW5xdWlyZXIucHJvbXB0KHtcclxuICAgICAgbmFtZTogXCJzZWxlY3RcIixcclxuICAgICAgdHlwZTogXCJsaXN0XCIsXHJcbiAgICAgIG1lc3NhZ2U6IFwiV2hvbSB3b3VsZCB5b3UgbGlrZSB0byBpbnRlcmFjdCB3aXRoID9cIixcclxuICAgICAgY2hvaWNlczogW1wic3RhZmZcIiwgXCJzdHVkZW50XCIsIFwiZXhpdFwiXSxcclxuICAgIH0pO1xyXG4gICAgaWYgKGFucy5zZWxlY3QgPT0gXCJzdGFmZlwiKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgIFwiWW91IGFwcHJvYWNoIHRoZSBzdGFmZiByb29tLiBQbGVhc2UgZmVlbCBmcmVlIHRvIGFzayBhbnkgcXVlc3Rpb24uXCJcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAoYW5zLnNlbGVjdCA9PSBcInN0dWRlbnRcIikge1xyXG4gICAgICBjb25zdCBhbnMgPSBhd2FpdCBpbnF1aXJlci5wcm9tcHQoe1xyXG4gICAgICAgIG5hbWU6IFwic3R1ZGVudFwiLFxyXG4gICAgICAgIHR5cGU6IFwiaW5wdXRcIixcclxuICAgICAgICBtZXNzYWdlOiBcIkVudGVyIHRoZSBzdHVkZW50J3MgbmFtZSB5b3Ugd2lzaCB0byBhbmdhZ2Ugd2l0aDogXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBzdHVkZW50ID0gcGVyc29ucy5zdHVkZW50cy5maW5kKCh2YWwpID0+IHZhbC5uYW1lID09IGFucy5zdHVkZW50KTtcclxuICAgICAgaWYgKCFzdHVkZW50KSB7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IG5ldyBTdHVkZW50KGFucy5zdHVkZW50KTtcclxuICAgICAgICBwZXJzb25zLmFkZFN0dWRlbnQobmFtZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEhlbGxvIGkgYW0gJHtuYW1lLm5hbWV9LiBOaWNlIHRvIG1lZXQgeW91IWApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTmV3IHN0dWRlbnQgYWRkZWQuXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ3VycmVudCBzdHVkZW50IGxpc3Q6XCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHBlcnNvbnMuc3R1ZGVudHMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBIZWxsbyBpIGFtICR7U3R1ZGVudC5uYW1lfS5OaWNlIHRvIHNlZSB5b3UgYWdhaW4hYCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJFeGlzdGluZyBzdHVkZW50IGxpc3Q6IFwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhwZXJzb25zLnN0dWRlbnRzKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChhbnMuc2VsZWN0ID09IFwiZXhpdFwiKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRXhpdGluZyB0aGUgcHJvZ3JhbS4uLlwiKTtcclxuICAgIH1cclxuICB9IHdoaWxlICh0cnVlKTtcclxufTtcclxuXHJcbnByb2dyYW1TdGFydChwZXJzb25zKTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLGNBQWM7QUFBckI7QUFBQTtBQUVBLFFBQU0sVUFBTixNQUFjO0FBQUEsTUFFWixZQUFZLEdBQVc7QUFDckIsYUFBSyxPQUFPO0FBQUEsTUFDZDtBQUFBLElBQ0Y7QUFFQSxRQUFNLFNBQU4sTUFBYTtBQUFBLE1BQWI7QUFDRSx3QkFBc0IsQ0FBQztBQUFBO0FBQUEsTUFDdkIsV0FBVyxLQUFjO0FBQ3ZCLGFBQUssU0FBUyxLQUFLLEdBQUc7QUFBQSxNQUN4QjtBQUFBLElBQ0Y7QUFFQSxRQUFNLFVBQVUsSUFBSSxPQUFPO0FBQzNCLFFBQU0sZUFBZSxDQUFPQSxhQUFvQjtBQUM5QyxTQUFHO0FBQ0QsZ0JBQVEsSUFBSSxVQUFVO0FBQ3RCLGNBQU0sTUFBTSxNQUFNLFNBQVMsT0FBTztBQUFBLFVBQ2hDLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxVQUNOLFNBQVM7QUFBQSxVQUNULFNBQVMsQ0FBQyxTQUFTLFdBQVcsTUFBTTtBQUFBLFFBQ3RDLENBQUM7QUFDRCxZQUFJLElBQUksVUFBVSxTQUFTO0FBQ3pCLGtCQUFRO0FBQUEsWUFDTjtBQUFBLFVBQ0Y7QUFBQSxRQUNGLFdBQVcsSUFBSSxVQUFVLFdBQVc7QUFDbEMsZ0JBQU1DLE9BQU0sTUFBTSxTQUFTLE9BQU87QUFBQSxZQUNoQyxNQUFNO0FBQUEsWUFDTixNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDWCxDQUFDO0FBQ0QsZ0JBQU0sVUFBVUQsU0FBUSxTQUFTLEtBQUssQ0FBQyxRQUFRLElBQUksUUFBUUMsS0FBSSxPQUFPO0FBQ3RFLGNBQUksQ0FBQyxTQUFTO0FBQ1osa0JBQU0sT0FBTyxJQUFJLFFBQVFBLEtBQUksT0FBTztBQUNwQyxZQUFBRCxTQUFRLFdBQVcsSUFBSTtBQUN2QixvQkFBUSxJQUFJLGNBQWMsS0FBSyx5QkFBeUI7QUFDeEQsb0JBQVEsSUFBSSxvQkFBb0I7QUFDaEMsb0JBQVEsSUFBSSx1QkFBdUI7QUFDbkMsb0JBQVEsSUFBSUEsU0FBUSxRQUFRO0FBQUEsVUFDOUIsT0FBTztBQUNMLG9CQUFRLElBQUksY0FBYyxRQUFRLDZCQUE2QjtBQUMvRCxvQkFBUSxJQUFJLHlCQUF5QjtBQUNyQyxvQkFBUSxJQUFJQSxTQUFRLFFBQVE7QUFBQSxVQUM5QjtBQUFBLFFBQ0YsV0FBVyxJQUFJLFVBQVUsUUFBUTtBQUMvQixrQkFBUSxJQUFJLHdCQUF3QjtBQUFBLFFBQ3RDO0FBQUEsTUFDRixTQUFTO0FBQUEsSUFDWDtBQUVBLGlCQUFhLE9BQU87QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogWyJwZXJzb25zIiwgImFucyJdCn0K

	